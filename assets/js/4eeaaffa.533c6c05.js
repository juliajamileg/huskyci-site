"use strict";(self.webpackChunkhusky_site=self.webpackChunkhusky_site||[]).push([[759],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(c,".").concat(d)]||u[d]||k[d]||l;return n?r.createElement(m,s(s({ref:t},i),{},{components:n})):r.createElement(m,s({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4536:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={id:"install-in-my-org",title:"Installing in my organization"},s=void 0,o={unversionedId:"guides/install-in-my-org",id:"guides/install-in-my-org",title:"Installing in my organization",description:"MongoDB",source:"@site/docs/guides/install-in-my-org.md",sourceDirName:"guides",slug:"/guides/install-in-my-org",permalink:"/docs/guides/install-in-my-org",draft:!1,tags:[],version:"current",frontMatter:{id:"install-in-my-org",title:"Installing in my organization"},sidebar:"docs",previous:{title:"Integrating HuskyCI into the pipeline",permalink:"/docs/guides/setup-my-ci"},next:{title:"Integrating with SonarQube",permalink:"/docs/guides/integrating-with-sonar"}},c={},p=[{value:"MongoDB",id:"mongodb",level:2},{value:"HuskyCI Docker API (CentOS instructions)",id:"huskyci-docker-api-centos-instructions",level:2},{value:"Install docker API:",id:"install-docker-api",level:4},{value:"Securing your Docker API (recommended \ud83d\udc3c):",id:"securing-your-docker-api-recommended-",level:4},{value:"Pulling images",id:"pulling-images",level:4},{value:"HuskyCI API (tsuru PaaS instructions)",id:"huskyci-api-tsuru-paas-instructions",level:2},{value:"HuskyCI Client (tsuru PaaS instructions)",id:"huskyci-client-tsuru-paas-instructions",level:2},{value:"Developer&#39;s CI",id:"developers-ci",level:2}],i={toc:p},u="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"mongodb"},"MongoDB"),(0,a.kt)("p",null,"Set up a MongoDB using your desired OS/configuration (preferably secure \ud83d\udc3c)."),(0,a.kt)("h2",{id:"huskyci-docker-api-centos-instructions"},"HuskyCI Docker API (CentOS instructions)"),(0,a.kt)("h4",{id:"install-docker-api"},"Install docker API:"),(0,a.kt)("p",null,"Install ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-engine"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yum install docker-engine\n")),(0,a.kt)("p",null,"Create a docker service folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir /etc/systemd/system/docker.service.d\n")),(0,a.kt)("p",null,"Set these configuration into override.conf:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"vim /etc/systemd/system/docker.service.d/override.conf\n")),(0,a.kt)("p",null,"Add this content to override.conf:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2376\n")),(0,a.kt)("p",null,"Reload daemon:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"systemctl daemon-reload\n")),(0,a.kt)("p",null,"Restart docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"systemctl restart docker.service\n")),(0,a.kt)("p",null,"Test docker API locally:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl localhost:2376/v1.24/version\n")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"securing-your-docker-api-recommended-"},"Securing your Docker API (recommended \ud83d\udc3c):"),(0,a.kt)("p",null,"Create certificates folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir /data/certs && cd /data/certs\n")),(0,a.kt)("p",null,"Download ",(0,a.kt)("inlineCode",{parentName:"p"},"create-certs.sh")," script from HuskyCI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wget https://raw.githubusercontent.com/globocom/huskyCI/master/deployments/scripts/create-certs.sh\n")),(0,a.kt)("p",null,"Set environment variables with certificate's information:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"echo 'export CERT_PASSPHRASE=\"mypassword$RANDOM\"' > .env\necho 'export CERT_DOCKER_API_HOST=\"address.to.dockerapi.host\"' >> .env\necho 'export CERT_HUSKYCI_HOST=\"address.to.huskyci.host\"' >> .env\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},". .env\n")),(0,a.kt)("p",null,"Create CA certificate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"chmod +x create-certs.sh\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./create-certs.sh -m ca -pw $CERT_PASSPHRASE -t . -e 900\n")),(0,a.kt)("p",null,"Create docker API server certificate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./create-certs.sh -m server -h $CERT_DOCKER_API_HOST -pw $CERT_PASSPHRASE -t . -e 365\n")),(0,a.kt)("p",null,"Create docker API client certificate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./create-certs.sh -m client -h $CERT_HUSKYCI_HOST -pw $CERT_PASSPHRASE -t . -e 365\n")),(0,a.kt)("p",null,"Update override.conf configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"vim /etc/systemd/system/docker.service.d/override.conf\n")),(0,a.kt)("p",null,"Add this new content to override.conf:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[Service]\nExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/data/certs/ca.pem --tlscert=/data/certs/server-cert.pem --tlskey=/data/certs/server-key.pem -H fd:// -H tcp://0.0.0.0:2376\n")),(0,a.kt)("p",null,"Reload daemon:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl daemon-reload\n")),(0,a.kt)("p",null,"Restart docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"systemctl restart docker.service\n")),(0,a.kt)("p",null,"Test secure docker API locally:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl -k https://localhost:2376/v1.24/version --cert /data/certs/client-cert.pem --key /data/certs/client-key.pem --cacert /data/certs/ca.pem\n")),(0,a.kt)("p",null,"You need now to save ",(0,a.kt)("inlineCode",{parentName:"p"},"ca.pem"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"client-key.pem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"client-cert.pem")," to be used in HuskyCI host so it can connect to docker API securely! \ud83d\udd12"),(0,a.kt)("h4",{id:"pulling-images"},"Pulling images"),(0,a.kt)("p",null,"After setting up HuskyCI Docker API, you can pull ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/huskyci"},"HuskyCI images")," into this host or let HuskyCI do this automatically when receiving first requests (may take some time). If you prefer the first strategy, use the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/enry\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/bandit\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/safety\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/brakeman\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/gosec\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/trivy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/tfsec\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/securitycodescan\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/gitauthors\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/gitleaks\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/osvscanner\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull huskyci/semgrep\n")),(0,a.kt)("h2",{id:"huskyci-api-tsuru-paas-instructions"},"HuskyCI API (",(0,a.kt)("a",{parentName:"h2",href:"https://github.com/tsuru/tsuru"},"tsuru")," PaaS instructions)"),(0,a.kt)("p",null,"Go to huskyCI folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd $GOPATH/src/github.com/globocom/huskyCI\n")),(0,a.kt)("p",null,"Copy certificates generated into ",(0,a.kt)("inlineCode",{parentName:"p"},"api")," folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cp $MYCERTFOLDER/{ca.pem,client-key.pem,client-cert.pem} api/\n")),(0,a.kt)("p",null,"Rename ",(0,a.kt)("inlineCode",{parentName:"p"},"client-key.pem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"client-cert.pem")," so huskyCI can read the right files when deploying: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mv client-key.pem key.pem\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mv client-cert.pem cert.pem\n")),(0,a.kt)("p",null,"Build huskyCI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"make build\n")),(0,a.kt)("p",null,"Create a new Tsuru app:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tsuru app-create huskyCI go \n")),(0,a.kt)("p",null,"Set all environment variables needed (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/globocom/huskyci/wiki/API-Environment-Variables"},"complete list"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tsuru env-set MONGO_HOST=urlto.mongo.com -p\n")),(0,a.kt)("p",null,"If you want HuskyCI to use HTTPS, generate ",(0,a.kt)("inlineCode",{parentName:"p"},"api-tls-cert.pem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"api-tls-key.pem")," before deploying. Also, you should set ",(0,a.kt)("inlineCode",{parentName:"p"},"HUSKY_API_ENABLE_HTTPS")," environment variable to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". "),(0,a.kt)("p",null,"If you've decided to use the Docker API secure method mentioned above, you need to set these environment variables with the commands below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'tsuru env-set -p -a <my-app\'s-name> HUSKYCI_DOCKERAPI_CERT_FILE_VALUE="$(cat /path/to/my/file)"\ntsuru env-set -p -a <my-app\'s-name> HUSKYCI_DOCKERAPI_CERT_KEY_VALUE ="$(cat /path/to/my/file)"\ntsuru env-set -p -a <my-app\'s-name> HUSKYCI_DOCKERAPI_CERT_CA_VALUE ="$(cat /path/to/my/file)"\n')),(0,a.kt)("p",null,"Deploy HuskyCI in tsuru (HTTP):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tsuru app-deploy -a huskyCI api/huskyci api/config.yaml Procfile\n")),(0,a.kt)("p",null,"Deploy HuskyCI in Tsuru (HTTPS enabled):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'tsuru env-set -p -a <my-app\'s-name> HUSKYCI_DOCKERAPI_API_TLS_CERT_VALUE ="$(cat /path/to/my/file)"\ntsuru env-set -p -a <my-app\'s-name> HUSKYCI_DOCKERAPI_API_TLS_KEY_VALUE ="$(cat /path/to/my/file)"\ntsuru app-deploy -a huskyCI api/huskyci api/config.yaml Procfile\n')),(0,a.kt)("h2",{id:"huskyci-client-tsuru-paas-instructions"},"HuskyCI Client (",(0,a.kt)("a",{parentName:"h2",href:"https://github.com/tsuru/tsuru"},"tsuru")," PaaS instructions)"),(0,a.kt)("p",null,"Build client locally (Linux binary): "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"make build-client-linux\n")),(0,a.kt)("p",null,"Create a static Tsuru app: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"tsuru app-create huskyCI-client static \n")),(0,a.kt)("p",null,"Deploy HuskyCI client in Tsuru:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"tsuru app-deploy -a huskyCI-client huskyci-client\n")),(0,a.kt)("h2",{id:"developers-ci"},"Developer's CI"),(0,a.kt)("p",null,"Ask kindly \ud83d\udc3c your development team to add a new stage into their project's CI (",(0,a.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," example):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'\nstages:\n  - huskyCI\n\nhuskyCI:\n    stage: huskyCI\n    variables:\n        HUSKYCI_CLIENT_URL: http://urlto.huskyci-client\n        HUSKYCI_CLIENT_API_ADDR: http://urlto.huskyci-API\n        HUSKYCI_CLIENT_REPO_URL: gitlab@gitlab.YOURORG.com:$CI_PROJECT_PATH.git\n        HUSKYCI_CLIENT_REPO_BRANCH: $CI_COMMIT_REF_NAME\n        HUSKYCI_CLIENT_API_USE_HTTPS: "false"\n    script:\n        - wget $HUSKYCI_CLIENT_URL/huskyci-client\n        - chmod +x huskyci-client\n        - ./huskyci-client\n')))}k.isMDXComponent=!0}}]);