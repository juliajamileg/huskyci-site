"use strict";(self.webpackChunkhusky_site=self.webpackChunkhusky_site||[]).push([[544],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=a.createContext({}),c=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(r.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),k=l,m=p["".concat(r,".").concat(k)]||p[k]||d[k]||i;return t?a.createElement(m,s(s({ref:n},u),{},{components:t})):a.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,s=new Array(i);s[0]=k;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o[p]="string"==typeof e?e:l,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},8675:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const i={id:"local-installation",title:"Local installation"},s=void 0,o={unversionedId:"quickstart/local-installation",id:"quickstart/local-installation",title:"Local installation",description:"The following instructions will help you set up your local environment to test and code this tool locally.",source:"@site/docs/quickstart/local-installation.md",sourceDirName:"quickstart",slug:"/quickstart/local-installation",permalink:"/huskyci-site/docs/quickstart/local-installation",draft:!1,tags:[],version:"current",frontMatter:{id:"local-installation",title:"Local installation"},sidebar:"docs",previous:{title:"Requirements",permalink:"/huskyci-site/docs/requirements/"},next:{title:"Guides",permalink:"/huskyci-site/docs/category/guides"}},r={},c=[{value:"Installing",id:"installing",level:2},{value:"Running",id:"running",level:2},{value:"Results",id:"results",level:2},{value:"HuskyCI Exit Codes",id:"huskyci-exit-codes",level:3},{value:"Make",id:"make",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The following instructions will help you set up your local environment to test and code this tool locally."),(0,l.kt)("h2",{id:"installing"},"Installing"),(0,l.kt)("p",null,"After forking and cloning the HuskyCI repository, simply run the command inside HuskyCI's folder:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"make install\n")),(0,l.kt)("h2",{id:"running"},"Running"),(0,l.kt)("p",null,"After installing, a ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file with the environment variables required to run a POC HuskyCI analysis should be generated:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'export HUSKYCI_CLIENT_REPO_URL="https://github.com/globocom/huskyCI.git"\nexport HUSKYCI_CLIENT_REPO_BRANCH="poc-python-bandit"\nexport HUSKYCI_CLIENT_API_ADDR="http://localhost:8888"\nexport HUSKYCI_CLIENT_API_USE_HTTPS="false"\nexport HUSKYCI_CLIENT_TOKEN="{YOUR_TOKEN_HERE}"\n')),(0,l.kt)("p",null,"You can change the repository and branch being analyzed by modifying the contents of ",(0,l.kt)("inlineCode",{parentName:"p"},"HUSKYCI_CLIENT_REPO_URL")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"HUSKYCI_CLIENT_REPO_BRANCH"),". Then simply source it through the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"source .env\n")),(0,l.kt)("p",null,"Mac OS:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"make run-client\n")),(0,l.kt)("p",null,"Linux:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"make run-client-linux\n")),(0,l.kt)("h2",{id:"results"},"Results"),(0,l.kt)("p",null,"If everything went well, you should see something similar to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"[HUSKYCI][*] poc-python-bandit -> https://github.com/globocom/huskyCI.git\n[HUSKYCI][*] huskyCI analysis started! ZHLYMYOZkgkxZ5VhBumBXuwVe87yGyFQ\n\n[HUSKYCI][!] Language: Python\n[HUSKYCI][!] Tool: Bandit\n[HUSKYCI][!] Severity: LOW\n[HUSKYCI][!] Confidence: MEDIUM\n[HUSKYCI][!] Details: Possible hardcoded password: 'password123!'\n[HUSKYCI][!] File: ./main.py\n[HUSKYCI][!] Line: 1\n[HUSKYCI][!] Code:\n1 secret = 'password123!'\n2 \n3 password = 'thisisnotapassword' #nohusky\n4 \n\n\n[HUSKYCI][!] Language: Python\n[HUSKYCI][!] Tool: Bandit\n[HUSKYCI][!] Severity: MEDIUM\n[HUSKYCI][!] Confidence: HIGH\n[HUSKYCI][!] Details: Use of exec detected.\n[HUSKYCI][!] File: ./main.py\n[HUSKYCI][!] Line: 7\n[HUSKYCI][!] Code:\n6 \n7 exec(command)\n8 \n\n\n[HUSKYCI][!] Language: Python\n[HUSKYCI][!] Tool: Safety\n[HUSKYCI][!] Severity: low\n[HUSKYCI][!] Code: \n[HUSKYCI][!] Vulnerable Below: \n[HUSKYCI][!] Details: It looks like your project doesn't have a requirements.txt file. huskyCI was not able to run safety properly.\n\n[HUSKYCI][SUMMARY] Python -> huskyci/bandit:1.6.2\n[HUSKYCI][SUMMARY] High: 0\n[HUSKYCI][SUMMARY] Medium: 1\n[HUSKYCI][SUMMARY] Low: 1\n[HUSKYCI][SUMMARY] NoSecHusky: 1\n\n[HUSKYCI][SUMMARY] Python -> huskyci/safety:1.8.5\n[HUSKYCI][SUMMARY] High: 0\n[HUSKYCI][SUMMARY] Medium: 0\n[HUSKYCI][SUMMARY] Low: 1\n\n[HUSKYCI][SUMMARY] Total\n[HUSKYCI][SUMMARY] High: 0\n[HUSKYCI][SUMMARY] Medium: 1\n[HUSKYCI][SUMMARY] Low: 2\n[HUSKYCI][SUMMARY] NoSecHusky: 1\n\n[HUSKYCI][*] Some HIGH/MEDIUM issues were found :(\n")),(0,l.kt)("h3",{id:"huskyci-exit-codes"},"HuskyCI Exit Codes"),(0,l.kt)("p",null,"After completing a scan, HuskyCI returns some codes according to the result found or errors during the process. By default, if no vulnerabilities are found, the exit code is 0. This code does not break the applications' pipeline."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Scan completed successfully and no medium/high vulnerabilities were found")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"190"),(0,l.kt)("td",{parentName:"tr",align:null},"Scan completed successfully and medium/high vulnerabilities were found")))),(0,l.kt)("h2",{id:"make"},"Make"),(0,l.kt)("p",null,"HuskyCI has some pre-defined functions that may help you locally develop awesome features. Simply run the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"make\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ make build-cli-linux: Builds CLI to the executable file huskyci-client\n$ make build-cli: Builds CLI to the executable file huskyci-client\n$ make build-client-linux: Builds client to the executable file huskyci-client\n$ make build-client: Builds client to the executable file huskyci-client\n$ make build-containers: Builds all securityTest containers locally with the tag latest\n$ make build: Builds Go project to the executable file huskyci\n$ make check-containers-version: Checks every securityTest version from their container images\n$ make check-deps: Checks dependencies of the project\n$ make check-env: Checks .env file from huskyCI\n$ make check-sec: Runs a security static analysis using Gosec\n$ make compose: Composes huskyCI environment using docker-compose\n$ make coverage: Run tests with code coverage\n$ make create-certs: Creates certs and sets all config to huskyCI_Docker_API\n$ make generate-local-token: Generates a local token to be used in a local environment\n$ make generate-passwords: Generates passwords and set them as environment variables\n$ make get-gosec-deps: Gets all gosec dependencies\n$ make get-lint-deps: Gets all link dependencies\n$ make get-test-deps: Gets all go test dependencies\n$ make ginkgo: Runs ginkgo\n$ make golangci-lint: Runs Golangci-lint\n$ make golint: Runs go lint\n$ make gosec: Runs gosec\n$ make help: Prints help message\n$ make install: Installs a development environment using docker-compose\n$ make lint: Runs all huskyCI lint\n$ make push-containers: Push securityTest containers to hub.docker\n$ make restart-huskyci-api: Restarts only huskyCI_API container\n$ make run-cli-linux: Run huskyci-client compiling it in Linux arch\n$ make run-cli: Runs huskyci-client\n$ make run-client-json: Runs huskyci-client with JSON output\n$ make run-client-linux-json: Run huskyci-client compiling it in Linux arch with JSON output\n$ make run-client-linux: Run huskyci-client compiling it in Linux arch\n$ make run-client: Runs huskyci-client\n$ make test: Perfoms all make tests\n$ make update-containers: Builds and push securityTest containers with the latest tags\n")))}d.isMDXComponent=!0}}]);