"use strict";(self.webpackChunkhusky_site=self.webpackChunkhusky_site||[]).push([[96],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?i.createElement(y,l(l({ref:t},u),{},{components:n})):i.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));n(4996);const a={id:"setup-my-ci",title:"Integrating HuskyCI into the pipeline"},l=void 0,o={unversionedId:"guides/setup-my-ci",id:"guides/setup-my-ci",title:"Integrating HuskyCI into the pipeline",description:"Using HuskyCI is simple. Your stage script only needs to download and execute a binary (written in Go) called huskyci-client. This client will perform several requests to HuskyCI's API and act like a worker, regularly checking if all security tests have already finished and printing the results found to STDOUT.",source:"@site/docs/guides/setup-my-ci.md",sourceDirName:"guides",slug:"/guides/setup-my-ci",permalink:"/docs/guides/setup-my-ci",draft:!1,tags:[],version:"current",frontMatter:{id:"setup-my-ci",title:"Integrating HuskyCI into the pipeline"},sidebar:"docs",previous:{title:"Guides",permalink:"/docs/category/guides"},next:{title:"Installing in my organization",permalink:"/docs/guides/install-in-my-org"}},s={},c=[{value:"Environment Variables",id:"environment-variables",level:2},{value:"GitLab CI/CD | GitLab",id:"gitlab-cicd--gitlab",level:2},{value:"Useful Tips",id:"useful-tips",level:3},{value:"Code Example",id:"code-example",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",{align:"center"}," ",(0,r.kt)("img",{src:"/img/huskyci-stage.png",scale:"10"})),(0,r.kt)("p",null,"Using HuskyCI is simple. Your stage script only needs to download and execute a binary (written in Go) called ",(0,r.kt)("inlineCode",{parentName:"p"},"huskyci-client"),". This client will perform several requests to HuskyCI's API and act like a worker, regularly checking if all security tests have already finished and printing the results found to STDOUT."),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"The following environment variables must be set so that ",(0,r.kt)("inlineCode",{parentName:"p"},"huskyci-client")," can properly communicate with the API:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HUSKYCI_CLIENT_REPO_URL")," - The repository address of the project being tested."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HUSKYCI_CLIENT_REPO_BRANCH")," - The name of the branch being tested. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HUSKYCI_CLIENT_API_ADDR")," - The address of where the API is waiting for the ",(0,r.kt)("inlineCode",{parentName:"li"},"huskyci-client")," to connect."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HUSKYCI_CLIENT_API_USE_HTTPS")," - A boolean value to define if HTTPS is being used or not."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HUSKYCI_CLIENT_TOKEN")," - Token authorization to check if that CI is allowed to perform tests.")),(0,r.kt)("h2",{id:"gitlab-cicd--gitlab"},"GitLab CI/CD | GitLab"),(0,r.kt)("p",null,"It is highly recommended not hardcoding HuskyCI environment variables into your ",(0,r.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," file. The best option is using GUI interface and mannually add them as follows:"),(0,r.kt)("p",{align:"center"}," ",(0,r.kt)("img",{src:"/img/gitlab-env-vars.png",scale:"10"})),(0,r.kt)("h3",{id:"useful-tips"},"Useful Tips"),(0,r.kt)("p",null,"When setting up a stage in Gitlab CI/CD, there are a few interesting environment variables that can be used to help ",(0,r.kt)("inlineCode",{parentName:"p"},"huskyci-client")," properly scan a particular branch (",(0,r.kt)("inlineCode",{parentName:"p"},"$CI_COMMIT_REF_NAME"),") and repository (",(0,r.kt)("inlineCode",{parentName:"p"},"$CI_PROJECT_PATH"),"). If you would like to check all these variables you should check the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/variables/predefined_variables.html"},"official Gitlab documentation"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"HUSKYCI_CLIENT_REPO_URL: gitlab@gitlab.myorg.com:$CI_PROJECT_PATH.git\nHUSKYCI_CLIENT_REPO_BRANCH: $CI_COMMIT_REF_NAME\n")),(0,r.kt)("h3",{id:"code-example"},"Code Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"stages:\n    - huskyCI\n\nhuskyCI:\n    stage: huskyCI\n    script:\n        - wget $HUSKYCI_CLIENT_URL/huskyci-client\n        - chmod +x huskyci-client\n        - ./huskyci-client\n")))}d.isMDXComponent=!0}}]);