"use strict";(self.webpackChunkhusky_site=self.webpackChunkhusky_site||[]).push([[799],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||g[h]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={id:"integrating-with-sonar",title:"Integrating with SonarQube"},o=void 0,s={unversionedId:"guides/integrating-with-sonar",id:"guides/integrating-with-sonar",title:"Integrating with SonarQube",description:"Settings",source:"@site/docs/guides/integrating-with-sonar.md",sourceDirName:"guides",slug:"/guides/integrating-with-sonar",permalink:"/docs/guides/integrating-with-sonar",draft:!1,tags:[],version:"current",frontMatter:{id:"integrating-with-sonar",title:"Integrating with SonarQube"},sidebar:"docs",previous:{title:"Installing in my organization",permalink:"/docs/guides/install-in-my-org"},next:{title:"Handling false positives",permalink:"/docs/guides/handling-false-positives"}},l={},u=[{value:"Settings",id:"settings",level:2},{value:"sonar-project.properties",id:"sonar-projectproperties",level:3},{value:".gitlab-ci.yaml (Gitlab CI)",id:"gitlab-ciyaml-gitlab-ci",level:3}],c={toc:u},p="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",{align:"center"}," ",(0,a.kt)("img",{src:"/img/sonar-stage2.png",scale:"10"})),(0,a.kt)("h2",{id:"settings"},"Settings"),(0,a.kt)("p",null,"HuskyCI can export its output to ",(0,a.kt)("a",{parentName:"p",href:"https://www.sonarqube.org/"},"SonarQube")," using CI artifacts. It is very important to mention that HuskyCI's stage should be executed prior to the SonarQube's stage:"),(0,a.kt)("p",{align:"center"}," ",(0,a.kt)("img",{src:"/img/sonar-stage.png",scale:"10"})),(0,a.kt)("h3",{id:"sonar-projectproperties"},"sonar-project.properties"),(0,a.kt)("p",null,"Add to the ",(0,a.kt)("inlineCode",{parentName:"p"},"sonar-project.properties")," file the ",(0,a.kt)("inlineCode",{parentName:"p"},"sonar.externalIssuesReportPaths")," flag to ",(0,a.kt)("inlineCode",{parentName:"p"},"./huskyCI/sonarqube.json")," so that SonarQube can consume HuskyCI JSON output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"sonar.externalIssuesReportPaths=./huskyCI/sonarqube.json\n")),(0,a.kt)("h3",{id:"gitlab-ciyaml-gitlab-ci"},".gitlab-ci.yaml (Gitlab CI)"),(0,a.kt)("p",null,"If you are using Gitlab CI, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts")," configuration to let HuskyCI generate the ",(0,a.kt)("inlineCode",{parentName:"p"},"sonarqube.json")," file so that SonarQube can consume it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"artifacts:\n    when: always # If a vulnerability is found, the CI will fail and the artifact will not be dropped into the pipeline. To overcome this, we must set the flag `always` here.\n    paths:\n      - huskyCI # Is the folder in which sonarqube.json is generated and should be available for others stages.\n")),(0,a.kt)("p",null,"The final ",(0,a.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yaml")," configuration to have both HuskyCI and SonarQube run is the following: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'stages:\n  - huskyCI\n  - sonar-stage\n\nhuskyCI: \n  stage: huskyCI\n  image: "golang:1.13-alpine"\n  before_script:\n    - ""\n  variables: # use your org configuration\n    HUSKYCI_CLIENT_URL: https://huskyci-client.YOURORG.com \n    HUSKYCI_CLIENT_API_ADDR: https://huskyci.YOURORG.com\n    HUSKYCI_CLIENT_REPO_URL: gitlab@gitlab.YOURORG.com:$CI_PROJECT_PATH.git\n    HUSKYCI_CLIENT_REPO_BRANCH: $CI_COMMIT_REF_NAME\n    HUSKYCI_CLIENT_API_USE_HTTPS: "true"\n  script:\n    - wget $HUSKYCI_CLIENT_URL/huskyci-client\n    - chmod +x huskyci-client\n    - ./huskyci-client\n  allow_failure: true\n  artifacts:\n    when: always\n    paths:\n      - huskyCI\n\nsonar: # use your org configuration\n  stage: sonar-stage\n  image: "YOURORG:sonar-image"\n  script:\n    - sonar-scanner \n')))}g.isMDXComponent=!0}}]);